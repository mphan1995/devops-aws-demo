name: CI-CD

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-southeast-1
  IMAGE_TAG: latest

jobs:
  checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dev deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install ruff bandit pip-audit pytest

      - name: Ruff (lint)
        run: |
          ruff check . --fix
          ruff check .

      - name: Bandit (SAST)
        run: bandit -r app -c bandit.yaml || true

      - name: pip-audit (deps vuln)
        run: pip-audit -r requirements.txt || true

      - name: Prepare PYTHONPATH
        run: echo "PYTHONPATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV

      - name: Run tests
        run: python -m pytest -q



      - name: Trivy FS scan
        uses: aquasecurity/trivy-action@0.22.0
        with:
          scan-type: 'fs'
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'

      - name: Build Docker image
        run: docker build -t app:${{ env.IMAGE_TAG }} .

      - name: Trivy Image scan
        uses: aquasecurity/trivy-action@0.22.0
        with:
          image-ref: 'app:${{ env.IMAGE_TAG }}'
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'

      - name: Gitleaks (secrets scan)
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --no-git -v

  deploy:
    if: github.ref == 'refs/heads/main'
    needs: [checks]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image
        env:
          ECR_REPO: ${{ secrets.ECR_REPO_URL }}
        run: |
          docker build -t $ECR_REPO:${{ env.IMAGE_TAG }} .
          docker push $ECR_REPO:${{ env.IMAGE_TAG }}

      - name: Trigger App Runner deployment (safe)
        if: env.APP_RUNNER_SERVICE_ARN != ''
        env:
          SERVICE_ARN: ${{ secrets.APP_RUNNER_SERVICE_ARN }}
          AWS_REGION: ${{ env.AWS_REGION }}
        run: |
          set -euo pipefail
          get_status() {
            aws apprunner describe-service --service-arn "$SERVICE_ARN" --region "$AWS_REGION" \
              --query 'Service.Status' --output text
          }

          status=$(get_status)
          echo "Current status = $status"

          # Nếu đang PAUSED thì resume trước
          if [ "$status" = "PAUSED" ]; then
            echo "Resuming service..."
            aws apprunner resume-service --service-arn "$SERVICE_ARN" --region "$AWS_REGION"
            # chờ tới khi RUNNING
            for i in {1..30}; do
              sleep 10
              status=$(get_status)
              echo "Status after resume: $status"
              [ "$status" = "RUNNING" ] && break
            done
          fi

          # Nếu đang bận thì bỏ qua (App Runner tự deploy khi image mới)
          if [ "$status" = "OPERATION_IN_PROGRESS" ]; then
            echo "Service busy (OPERATION_IN_PROGRESS). Skipping explicit start."
            exit 0
          fi

          # CREATE_FAILED: nên kiểm tra lại image/tag hoặc chờ service về RUNNING rồi mới start
          if [ "$status" = "CREATE_FAILED" ]; then
            echo "Service in CREATE_FAILED. Skip start; check Events & ensure ECR :latest exists."
            exit 0
          fi

          # Chỉ chạy khi RUNNING
          if [ "$status" = "RUNNING" ]; then
            echo "Starting deployment..."
            aws apprunner start-deployment --service-arn "$SERVICE_ARN" --region "$AWS_REGION"
          else
            echo "Service not RUNNING (status=$status). Skipping start."
          fi

