name: CI-CD

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-southeast-1
  IMAGE_TAG: latest

jobs:
  checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dev deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install ruff bandit pip-audit pytest

      - name: Ruff (lint)
        run: ruff check .

      - name: Bandit (SAST)
        run: bandit -r app -c bandit.yaml || true

      - name: pip-audit (deps vuln)
        run: pip-audit -r requirements.txt || true

      - name: Run tests
        run: pytest -q

      - name: Trivy FS scan
        uses: aquasecurity/trivy-action@0.22.0
        with:
          scan-type: 'fs'
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'

      - name: Build Docker image
        run: docker build -t app:${{ env.IMAGE_TAG }} .

      - name: Trivy Image scan
        uses: aquasecurity/trivy-action@0.22.0
        with:
          image-ref: 'app:${{ env.IMAGE_TAG }}'
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'

      - name: Gitleaks (secrets scan)
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --no-git -v

  deploy:
    if: github.ref == 'refs/heads/main'
    needs: [checks]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image
        env:
          ECR_REPO: ${{ secrets.ECR_REPO_URL }}
        run: |
          docker build -t $ECR_REPO:${{ env.IMAGE_TAG }} .
          docker push $ECR_REPO:${{ env.IMAGE_TAG }}

      - name: Trigger App Runner deployment (optional)
        env:
          SERVICE_ARN: ${{ secrets.APP_RUNNER_SERVICE_ARN }}
        run: |
          if [ -n "$SERVICE_ARN" ]; then
            aws apprunner start-deployment --service-arn "$SERVICE_ARN"
          else
            echo "Auto-deploy is enabled; skipping explicit start."
          fi
